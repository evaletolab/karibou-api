
var db = require('mongoose')
  , Schema   = db.Schema
  , ObjectId = Schema.ObjectId
  , validate = require('mongoose-validate')
	, passport = require('passport')
  , postfinance = require('node-postfinance')
  , _ = require('underscore');
	
//var	bcrypt = require('bcrypt');

 /* Enumerations for field validation */
 var EnumGender="homme femme".split(' ');
 var EnumProvider="twitter facebook goolge persona local".split(' ');
 var EnumRegion=config.shop.region.list;


// validate URL
validate.url = function (value) {
  try {
   check(value).len(10, 200).regex(/(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/);
  } catch(err) {
   return false;
  }
  return true;
};

// validate postal code
validate.postal = function (value) {
  try {
   check(value).isAlpha();   
  } catch(err) {
   return false;
  }
  return true;
};
 

 // Normalized profile information conforms to the contact schema established by Portable Contacts.
 // http://portablecontacts.net/draft-spec.html#schema
 // MongoError: E11000 duplicate key error index: karibou-devel.users.$email.address_1  dup key: { : null }
 var UserSchema = new Schema({
    /* A unique identifier for the user, as generated by the service provider.  */
    id    : {type:Number, required: true, unique: true},   

    /* The provider which with the user authenticated (facebook, twitter, etc.) */
    provider: {type:String, required: true, unique: false, enum: EnumProvider}, 
    
    email:{
      address:{type : String, index:true, unique: true, sparse: true, required : false, 
        validate:[validate.email, 'adresse email invalide']
      },
      status:Schema.Types.Mixed,
    },
    
    /* The name of this user, suitable for display.*/
    displayName:String, 
    name: {
        familyName: String,
        givenName: String
    },
    
    birthday: Date,
    gender: {type:String, enum:EnumGender},
    tags: [String],
    url:{type:String, validate:[validate.url,'Invalide URL format or lenght']},
    
    phoneNumbers: [{
        number:{ type: String },
        what:{ type: String }
    }],
    
    photo: String,
    
    addresses: [{
          name: { type: String, required : true, lowercase: true, trim: true },
          note: { type: String, trim: true },
          floor: { type: String, trim: true, required : true },
          streetAdress: { type: String, required : true, lowercase: true, trim: true },
          region: { type: String, required : true, trim: true, default:"Genève", enum: EnumRegion },
          postalCode: { type: String, required : false /**,
            validate:[validate.postal,'Invalide postal code'] **/
          },
          primary:{ type: Boolean, required : true, default:false},
          geo:{
            lat:{type:Number, required: true},
            lng:{type:Number, required: true}
          }
    }],
    
    /* preferred products*/
    likes: [{type: Schema.Types.ObjectId, ref : 'Products'}],
    
    /* The available Shop for this user */
    shops: [{type: Schema.Types.ObjectId, ref : 'Shops'}],
    
    /* disqus sso */
    context:{type:Schema.Types.Mixed},

    /* payments methods */
    payments:[{type:Schema.Types.Mixed, unique: true}],
    // payments:[{
    //   type:{type:String},
    //   name:{type:String},
    //   number:{type:String},
    //   expiry:{type:String},
    //   alias:{type:String,unique:true,required:true}
    // }],
    
    /* make user valid/invalid */
    status:{type:Boolean, default: true},
    
    /* password and creation date (for local session only)*/    
    created:{type:Date, default: Date.now},
    updated:{type:Date, default: Date.now},
    logged:{type:Date, default: Date.now},

		salt: { type: String, required: false },
		hash: { type: String, required: false },   
		roles: Array,
    rank: String
});


UserSchema.statics.findOrCreate=function(u,callback){
	var Users=this.model('Users'),
      criteria={};

  // find by id
  if(u.id){
    criteria.id=u.id
  }

  //find by email
  if(u['email.address']){
    criteria['email.address']=u['email.address']
  }

  Users.findOne(criteria, function(err, user){
    if(!user){
      //
      // user should be created
      if (u.provider==='local'){
        return callback("L'utilisateur ne peut pas être créer automatiquement");
      }
      
      if (!u.id && u['email.address']){
        //
        // this question is essential but it need a promise
        // db.model('Sequences').nextUser(function(uid){
        //})

        u.id=u['email.address'].hash()
        u["email.status"]=true;
      }
      var newuser=new Users(u);


      newuser.save(function(err){
        //if ( err && err.code === 11000 )
        callback(err,newuser);
      });
    }else{
      if(u.provider&&(user.provider!==u.provider)){
        return callback("L'identifiant est déja utilisé par le provider "+user.provider, null);  
      }

      //
      // keep on track login
      user.logged=new Date()
      user.save();

      callback(err, user);
    }
  });

};



UserSchema.statics.findByEmail = function(email, success, fail){
  return this.model('Users').findOne({'email.address':email}).populate('shops').populate('likes').exec(function(err,user){
    if(err){
      fail(err)
    }else{
      success(user);
    }
  });
};

UserSchema.statics.findByToken = function(token, success, fail){
  return this.model('Users').findOne({provider:token}).populate('shops').populate('likes').exec(function(err,user){
    if(err){
      fail(err)
    }else{
      success(user);
    }
  });
};



UserSchema.methods.getDisquSSO=function(){
  var DISQUS_SECRET = config.disqus.secret;
  var DISQUS_PUBLIC = config.disqus.pub;

  var disqusData = {
    id: this.id,
    username: this.display(),
    email: this.email.address
  };

  var disqusStr = JSON.stringify(disqusData);
  var timestamp = Math.round(+new Date() / 1000);

  /*
   * Note that `Buffer` is part of node.js
   * For pure Javascript or client-side methods of
   * converting to base64, refer to this link:
   * http://stackoverflow.com/questions/246801/how-can-you-encode-a-string-to-base64-in-javascript
   */
  var message = new Buffer(disqusStr).toString('base64');

  /* 
   * CryptoJS is required for hashing (included in dir)
   * https://code.google.com/p/crypto-js/
   */
  // var result = CryptoJS.HmacSHA1(message + " " + timestamp, DISQUS_SECRET);
  // var hexsig = CryptoJS.enc.Hex.stringify(result);

  var hexsig = require('crypto').createHmac('sha1',DISQUS_SECRET).update(message + " " + timestamp).digest("hex");


  return {
    pubKey: DISQUS_PUBLIC,
    auth: message + " " + hexsig + " " + timestamp
  };

}

UserSchema.methods.isAdmin = function () {
  return this.hasRole('admin');
};

UserSchema.methods.hasRole = function (role) {
 for (var i = 0; i < this.roles.length; i++) {
   if (this.roles[i] === role) {
     // if the role that we are chekign matches the 'role' we are
     // looking for return true
     return true;
   }

 };
 // if the role does not match return false
 return false;
};

UserSchema.methods.addLikes = function(product, callback){
  var u=this;
  u.likes.push(product);
  u.save(callback);
};

UserSchema.methods.removeLikes = function(product, callback){
  var u=this;
  u.likes.pop(product);
  u.save(callback);
};

//
// like product
UserSchema.statics.like=function(id,sku,callback){
  var Users=this.model('Users'), Products=this.model('Products');  

  return Users.findOne({id:id}).populate('likes').exec(function (err, user) {

    if(err){
      return callback(err);
    }
    if(!user){
      return callback("Utilisateur inconnu");
    }

    // remove like?
    var product=_.find(user.likes, function(p){return p.sku==sku});
    if (product){
        return user.removeLikes(product,callback)        
    }

    return Products.findOneBySku(sku,function(err,product){
      return user.addLikes(product,callback)          
    })

  });
};

UserSchema.methods.display = function(){
  if (this.displayName)return this.displayName;
  if (this.name && (this.name.givenName || this.name.familyName)) {
    return this.name.givenName+' '+this.name.familyName
  }
  if (this.id){
    return this.id+'@'+this.provider;
  }
    
  return 'Anonymous';
};

UserSchema.statics.login = function(email, password, callback){
  console.log("login",email, password);
};


/**
 * local registration
 * - virtual field for password (mapped to salt && hash)
 * - verify password 
 * - authenticate
 * - register
 */  
UserSchema.virtual('password').get(function () {
  return this._password;
});

UserSchema.virtual('password').set(function (password) {
  this._password = password;

// more safe
//  var salt = this.salt = bcrypt.genSaltSync(10);
//  this.hash = bcrypt.hashSync(password, salt);
  var crypto= require('crypto');
  var salt  = this.salt = crypto.randomBytes(32).toString('base64'); 
  // FIXME hash method are not safe, use bcrypt 
  this.hash = crypto.createHash('sha1').update(password).digest("hex")
});

UserSchema.method('verifyPassword', function(password, callback) {
  var hash=require('crypto').createHash('sha1').update(password).digest("hex");

  //
  // for security reason password hash is removed from the memory!
  if(this.hash==="true"){
    this.model('Users').findOne({ id: this.id }).exec(function(err,user){
      return   callback(null,hash===user.hash);        
    })    
  }else{
    callback(null,hash===this.hash);    
  }
//  bcrypt.compare(password, this.hash, callback);
});


UserSchema.statics.authenticate=function(email, password, callback) {
  var self=this;

  return this.model('Users').findOne({ 'email.address': email }).populate('shops').populate('likes').exec(function(err,user){
      if (err) { return callback(err); }

      // on user is Null
      if (!user) { 
        return callback("L'utilisateur ou le mot de passe est incorrect", false); 
      }
      
      // verify passwd
      user.verifyPassword(password, function(err, passwordCorrect) {
        if (err) { return callback(err); }
        if (!passwordCorrect) { return callback(null, false); }

        //
        // keep on track login, do not use save it heat the hash
        user.logged=new Date()
        return user.save(callback)

        //
        //
        //return callback(null, user);
      });
    });
};



UserSchema.statics.register = function(email, first, last, password, confirm, extend, callback){
  // check signature
  if(callback===undefined && typeof extend==='function' )
    callback=extend;

	var Users=this.model('Users'),
      uid=email.hash(new Date());
	//error("TODO, we cannot register a user without matching a common provider (twitter, google, fb, flickr)");
	
	if (password !==confirm){
	  callback(("la confirmation du mot de passe n'est pas correcte"));
	  return;
	}
	
  // verifiy duplicity
  Users.findOne({'email.address':email}).exec(function(e,u){
    if(u){
      return callback("Cet utilisateur existe déjà")
    }

    //hash password (see virtual methods )
    //var pwd=require('crypto').createHash('sha1').update(password).digest("hex");
    
      
    /* The name of this user, suitable for display.*/
    //FIXME email.hash() should be replaced by (id++)+10000000
    // create a new customer
    var user=new Users({
        id:uid,
        displayName:first+" "+last, 
        name: {
            familyName: last,
            givenName: first
        },
        email:{address:email,status:new Date()},
        provider:"local",
        password:password,
        created:new Date()
    });

    //
    // extended registration
    if(extend.phoneNumbers)
      user.phoneNumbers=extend.phoneNumbers;

    //
    // extended registration
    if(extend.addresses)
      user.addresses=extend.addresses

    //save it
    user.save(function(err){    
      //FIXME manage the duplicate address ( err && err.code === 11000 )
      callback(err, user);
    });

  })
};

UserSchema.statics.updateStatus=function(id, status,callback){
	var Users=this.model('Users');	

  return Users.findOne(id).populate('shops').populate('likes').exec(function (err, user) {
    if(err){
      return callback(err);
    }
    if(!user){
      return callback("Utilisateur inconnu");
    }
    user.status=status;
    user.updated=Date.now();
    user.save(function (err) {
      //
      // update all shops
      require('async').forEach(user.shops, function(shop,cb){
          shop.updateStatus(status,function(err){
            cb(err)
          });        
      },function(err){
        callback(err,user);
      });    
    });
  
  });
}





//
// update user 
UserSchema.statics.findAndUpdate=function(id, u,callback){
	var Users=this.model('Users');	
  //http://mongoosejs.com/docs/api.html#model_Model.findByIdAndUpdate
  return Users.findOne(id).populate('shops').populate('likes').exec(function (err, user) {
    if(err){
      return callback(err);
    }
    if(!user){
      return callback("Utilisateur inconnu");
    }

    if (u.name&&u.name.familyName) user.name.familyName=u.name.familyName;
    if (u.name&&u.name.givenName) user.name.givenName=u.name.givenName;
    user.displayName=user.name.givenName+" "+user.name.familyName;
    
    //
    // check is email has changed (require a validation)
    if (u.email&&u.email.address) {
      if (user.email.address!==u.email.address)
        user.email.status=new Date();
      user.email.address=u.email.address;
    }
    //
    // update the adress
    var primary=0;
    if (u.addresses) {
      user.addresses=[]
      u.addresses.forEach(function(address){
        if(address.primary)primary++;
        user.addresses.push(address)
      });
    }
    
    if(primary>1){
      return callback("Il ne peut pas y avoir deux adresses principales");
    }

    //
    // update the phones
    if (u.phoneNumbers) {
      user.phoneNumbers=[]
      u.phoneNumbers.forEach(function(phone){
        user.phoneNumbers.push(phone)
      });
    }

    //
    // DO NOT update the validation here
    // ONLY ADMIN CAN DO THAT
    if(u.status!=user.status){
    }
    user.updated=Date.now();
    
    user.save(callback);
  });
};


//
// update user payment
UserSchema.statics.updatePayment=function(id, alias, payment,callback){
  var Users=this.model('Users');

  var card
  try{
    card=new postfinance.Card({
      name:payment.name,
      number:payment.number,
      expiry:payment.expiry,
      csc:payment.csc
    })    
  }catch(e){
    return callback(e.message)
  }

  if(!card.isValid()){
    return callback("Cette carte n'est pas valide")
  }

  if(card.isExpired()){
    return callback("Cette carte n'est plus valide")
  }


  if((id+card.issuer.toLowerCase()).hash().crypt()!==alias.crypt()){
    return callback("Vous ne pouvez pas changer de type de carte")
  }

  var out={
    type:card.issuer.toLowerCase(),
    name:payment.name,
    number:card.hiddenNumber,
    expiry:payment.expiry      
  }

  return Users.update({id: id,'payments.alias':alias.crypt()}, {'$set': {
    'payments.$.type': out.type,
    'payments.$.name': out.name,
    'payments.$.number': out.number,
    'payments.$.expiry': out.expiry,
    'payments.$.updated': Date.now(),
  }}, function(err, n, stat){

    if(n===0){
      return callback("Invalid request")
    }

    return callback(err,out)
  });
}

//
// verify if an alias belongs to this user
UserSchema.methods.isValidAlias=function(alias, method){
  return ((this.id+method.toLowerCase()).hash().crypt()===alias.crypt());
}

UserSchema.statics.isValidAliasWithId=function(alias, id, method){
  return ((id+method.toLowerCase()).hash().crypt()===alias.crypt());
}


//
// delete user payment
UserSchema.statics.deletePayment=function(id, alias,callback){
  var Users=this.model('Users');  

  // for ecurity reason alias is crypted    
  Users.update({id: id, 'payments.alias':alias.crypt()},
    {$pull: {payments:{alias:alias.crypt()}}},{safe:true},
  function(err, n,stat){

    if(n===0){
      return callback("Invalid request")
    }
    return callback(err)
  });
}

//
// add payment
UserSchema.statics.addPayment=function(id, payment,callback){
  var Users=this.model('Users'), safePayment={};  

  // try to build the card

  var card
  try{
    card=new postfinance.Card({
      name:payment.name,
      number:payment.number,
      expiry:payment.expiry,
      csc:payment.csc
    })    
  }catch(e){
    return callback(e.message)
  }

  if(!card.isValid()){
    return callback("Cette carte n'est pas valide")
  }

  if(card.isExpired()){
    return callback("Cette carte n'est plus valide")
  }


  // for security reason alias is crypted
  var alias=(id+card.issuer.toLowerCase()).hash()
  safePayment.alias=alias.crypt();
  safePayment.type=card.issuer.toLowerCase();
  safePayment.name=payment.name;
  safePayment.number=card.hiddenNumber;
  safePayment.expiry=payment.expiry;
  safePayment.updated=Date.now();

  card.publish({alias:alias},function(err,res){
    if(err){
      return callback(err.message)
    }

    // save card alias
    Users.findOne({id: id}, function(err,user){
      if(err){
        // TODO alias should be removed
        return callback(err)
      }
      if(!user){
        return callback("Utilisateur inconnu");      
      }
      if(!user.payments) user.payments=[]

      for (var i in user.payments){
        if(user.payments[i].alias===safePayment.alias)return callback("Cette méthode de paiement existe déjà")
      }
      user.payments.push(safePayment)

      return user.save(callback)
    });

  })
}



UserSchema.set('autoIndex', config.mongo.ensureIndex);
module.exports = db.model('Users', UserSchema);



